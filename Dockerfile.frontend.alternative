# Alternative Dockerfile for frontend with better reliability
FROM node:18-slim AS builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set npm configuration for better reliability
RUN npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 5 && \
    npm config set registry https://registry.npmjs.org/

# Copy package files
COPY package*.json ./

# Install dependencies with retry logic
RUN for i in 1 2 3; do npm ci --only=production --silent --no-audit --no-fund && break || sleep 10; done

# Install dev dependencies
RUN for i in 1 2 3; do npm i -D terser @types/node --silent --no-audit --no-fund && break || sleep 10; done

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage with nginx
FROM nginx:1.25-slim

# Install wget for health checks
RUN apt-get update && apt-get install -y wget curl && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /usr/share/nginx/html

# Copy built application
COPY --from=builder /app/dist .

# Copy nginx configuration
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# Create nginx user and set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:80 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
